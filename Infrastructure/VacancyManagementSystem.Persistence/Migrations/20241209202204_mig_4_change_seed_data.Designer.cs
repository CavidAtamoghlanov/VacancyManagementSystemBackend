// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VacancyManagementSystem.Persistence.Context;

#nullable disable

namespace VacancyManagementSystem.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241209202204_mig_4_change_seed_data")]
    partial class mig_4_change_seed_data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationRoleApplicationUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationRoleApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QuestionBankId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionBankId");

                    b.ToTable("AnswerOptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 628, DateTimeKind.Local).AddTicks(5908),
                            IsCorrect = true,
                            IsDeleted = false,
                            OptionText = "A programming language",
                            QuestionBankId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 628, DateTimeKind.Local).AddTicks(5950),
                            IsCorrect = false,
                            IsDeleted = false,
                            OptionText = "A database",
                            QuestionBankId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 628, DateTimeKind.Local).AddTicks(5953),
                            IsCorrect = true,
                            IsDeleted = false,
                            OptionText = "The ability to take many forms",
                            QuestionBankId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 628, DateTimeKind.Local).AddTicks(5955),
                            IsCorrect = false,
                            IsDeleted = false,
                            OptionText = "A type of inheritance",
                            QuestionBankId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 628, DateTimeKind.Local).AddTicks(5957),
                            IsCorrect = true,
                            IsDeleted = false,
                            OptionText = "A financial statement",
                            QuestionBankId = 3
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 628, DateTimeKind.Local).AddTicks(5959),
                            IsCorrect = false,
                            IsDeleted = false,
                            OptionText = "A legal document",
                            QuestionBankId = 3
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 628, DateTimeKind.Local).AddTicks(5961),
                            IsCorrect = true,
                            IsDeleted = false,
                            OptionText = "Return on Investment",
                            QuestionBankId = 4
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 628, DateTimeKind.Local).AddTicks(5963),
                            IsCorrect = false,
                            IsDeleted = false,
                            OptionText = "Rate of Increase",
                            QuestionBankId = 4
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 628, DateTimeKind.Local).AddTicks(5964),
                            IsCorrect = true,
                            IsDeleted = false,
                            OptionText = "Search Engine Optimization",
                            QuestionBankId = 5
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 628, DateTimeKind.Local).AddTicks(5966),
                            IsCorrect = false,
                            IsDeleted = false,
                            OptionText = "Social Engagement Online",
                            QuestionBankId = 5
                        });
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.Applicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CVPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<double>("TestScore")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VacancyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VacancyId");

                    b.ToTable("Applicants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CVPath = "cv1.pdf",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 631, DateTimeKind.Local).AddTicks(2869),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Doe",
                            PhoneNumber = "+123456789",
                            TestScore = 85.0,
                            UserId = 1,
                            VacancyId = 1
                        },
                        new
                        {
                            Id = 2,
                            CVPath = "cv2.pdf",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 631, DateTimeKind.Local).AddTicks(2912),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            IsDeleted = false,
                            LastName = "Smith",
                            PhoneNumber = "+987654321",
                            TestScore = 90.0,
                            UserId = 2,
                            VacancyId = 1
                        },
                        new
                        {
                            Id = 3,
                            CVPath = "cv3.pdf",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 631, DateTimeKind.Local).AddTicks(2916),
                            Email = "bob.johnson@example.com",
                            FirstName = "Bob",
                            IsDeleted = false,
                            LastName = "Johnson",
                            PhoneNumber = "+234567891",
                            TestScore = 78.0,
                            UserId = 3,
                            VacancyId = 2
                        },
                        new
                        {
                            Id = 4,
                            CVPath = "cv4.pdf",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 631, DateTimeKind.Local).AddTicks(2918),
                            Email = "alice.brown@example.com",
                            FirstName = "Alice",
                            IsDeleted = false,
                            LastName = "Brown",
                            PhoneNumber = "+345678912",
                            TestScore = 88.0,
                            UserId = 4,
                            VacancyId = 2
                        },
                        new
                        {
                            Id = 5,
                            CVPath = "cv5.pdf",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 631, DateTimeKind.Local).AddTicks(2923),
                            Email = "charlie.davis@example.com",
                            FirstName = "Charlie",
                            IsDeleted = false,
                            LastName = "Davis",
                            PhoneNumber = "+456789123",
                            TestScore = 95.0,
                            UserId = 5,
                            VacancyId = 3
                        },
                        new
                        {
                            Id = 6,
                            CVPath = "cv6.pdf",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 631, DateTimeKind.Local).AddTicks(2925),
                            Email = "emily.clark@example.com",
                            FirstName = "Emily",
                            IsDeleted = false,
                            LastName = "Clark",
                            PhoneNumber = "+567891234",
                            TestScore = 70.0,
                            UserId = 6,
                            VacancyId = 4
                        },
                        new
                        {
                            Id = 7,
                            CVPath = "cv7.pdf",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 631, DateTimeKind.Local).AddTicks(2928),
                            Email = "daniel.harris@example.com",
                            FirstName = "Daniel",
                            IsDeleted = false,
                            LastName = "Harris",
                            PhoneNumber = "+678912345",
                            TestScore = 85.0,
                            UserId = 7,
                            VacancyId = 5
                        },
                        new
                        {
                            Id = 8,
                            CVPath = "cv8.pdf",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 631, DateTimeKind.Local).AddTicks(2930),
                            Email = "sophia.martinez@example.com",
                            FirstName = "Sophia",
                            IsDeleted = false,
                            LastName = "Martinez",
                            PhoneNumber = "+789123456",
                            TestScore = 82.0,
                            UserId = 8,
                            VacancyId = 6
                        },
                        new
                        {
                            Id = 9,
                            CVPath = "cv9.pdf",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 631, DateTimeKind.Local).AddTicks(2933),
                            Email = "liam.anderson@example.com",
                            FirstName = "Liam",
                            IsDeleted = false,
                            LastName = "Anderson",
                            PhoneNumber = "+891234567",
                            TestScore = 77.0,
                            UserId = 9,
                            VacancyId = 7
                        },
                        new
                        {
                            Id = 10,
                            CVPath = "cv10.pdf",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 631, DateTimeKind.Local).AddTicks(2936),
                            Email = "olivia.lee@example.com",
                            FirstName = "Olivia",
                            IsDeleted = false,
                            LastName = "Lee",
                            PhoneNumber = "+912345678",
                            TestScore = 92.0,
                            UserId = 10,
                            VacancyId = 8
                        });
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 633, DateTimeKind.Local).AddTicks(3293),
                            IsDeleted = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 633, DateTimeKind.Local).AddTicks(3300),
                            IsDeleted = false,
                            Name = "User",
                            NormalizedName = "USER",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61677e49-8a3d-4454-aa6c-fd80432e33d8",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 634, DateTimeKind.Local).AddTicks(494),
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "User",
                            LockoutEnabled = false,
                            PhoneNumber = "+123456789",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b738d635-da83-4a15-bccc-925edb14e91f",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 634, DateTimeKind.Local).AddTicks(578),
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PhoneNumber = "+987654321",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ace98982-93e9-40d7-8ad3-ec13d2ab1178",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 634, DateTimeKind.Local).AddTicks(585),
                            Email = "jane.smith@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            IsDeleted = false,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            PhoneNumber = "+234567891",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7675aca3-aa33-4bf2-b7e5-2554ffea61c4",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 634, DateTimeKind.Local).AddTicks(589),
                            Email = "alice.brown@example.com",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            IsDeleted = false,
                            LastName = "Brown",
                            LockoutEnabled = false,
                            PhoneNumber = "+345678912",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "67b04e97-2956-49cf-b1f6-4709013b4ba9",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 634, DateTimeKind.Local).AddTicks(594),
                            Email = "bob.johnson@example.com",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            IsDeleted = false,
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            PhoneNumber = "+456789123",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30930d31-fc24-44a2-b7c9-ba454c3c16e5",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 634, DateTimeKind.Local).AddTicks(600),
                            Email = "charlie.davis@example.com",
                            EmailConfirmed = false,
                            FirstName = "Charlie",
                            IsDeleted = false,
                            LastName = "Davis",
                            LockoutEnabled = false,
                            PhoneNumber = "+567891234",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8b295a2-6f0d-40a4-bc78-5a19d33fa531",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 634, DateTimeKind.Local).AddTicks(605),
                            Email = "emily.clark@example.com",
                            EmailConfirmed = false,
                            FirstName = "Emily",
                            IsDeleted = false,
                            LastName = "Clark",
                            LockoutEnabled = false,
                            PhoneNumber = "+678912345",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e742b0cd-12e6-4611-a933-b45f83e7d932",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 634, DateTimeKind.Local).AddTicks(609),
                            Email = "daniel.harris@example.com",
                            EmailConfirmed = false,
                            FirstName = "Daniel",
                            IsDeleted = false,
                            LastName = "Harris",
                            LockoutEnabled = false,
                            PhoneNumber = "+789123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5596c292-9746-43ec-9f92-685369be2d66",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 634, DateTimeKind.Local).AddTicks(671),
                            Email = "sophia.martinez@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sophia",
                            IsDeleted = false,
                            LastName = "Martinez",
                            LockoutEnabled = false,
                            PhoneNumber = "+891234567",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c361719-ca90-4207-82a6-cdf017da1aee",
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 634, DateTimeKind.Local).AddTicks(677),
                            Email = "liam.anderson@example.com",
                            EmailConfirmed = false,
                            FirstName = "Liam",
                            IsDeleted = false,
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            PhoneNumber = "+912345678",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 635, DateTimeKind.Local).AddTicks(2955),
                            Description = "Information Technology",
                            IsDeleted = false,
                            Name = "IT"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 635, DateTimeKind.Local).AddTicks(2960),
                            Description = "Financial Services",
                            IsDeleted = false,
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 635, DateTimeKind.Local).AddTicks(2964),
                            Description = "Marketing and Advertising",
                            IsDeleted = false,
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 635, DateTimeKind.Local).AddTicks(2968),
                            Description = "Healthcare Services",
                            IsDeleted = false,
                            Name = "Healthcare"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 635, DateTimeKind.Local).AddTicks(2972),
                            Description = "Educational Services",
                            IsDeleted = false,
                            Name = "Education"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 635, DateTimeKind.Local).AddTicks(2975),
                            Description = "Engineering Services",
                            IsDeleted = false,
                            Name = "Engineering"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 635, DateTimeKind.Local).AddTicks(2979),
                            Description = "Retail and Sales",
                            IsDeleted = false,
                            Name = "Retail"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 635, DateTimeKind.Local).AddTicks(2983),
                            Description = "Construction and Real Estate",
                            IsDeleted = false,
                            Name = "Construction"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 635, DateTimeKind.Local).AddTicks(2986),
                            Description = "Design and Creative Arts",
                            IsDeleted = false,
                            Name = "Design"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 635, DateTimeKind.Local).AddTicks(2991),
                            Description = "Logistics and Transportation",
                            IsDeleted = false,
                            Name = "Logistics"
                        });
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.QuestionBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("QuestionBanks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(214),
                            IsDeleted = false,
                            QuestionText = "What is C#?"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(229),
                            IsDeleted = false,
                            QuestionText = "Explain polymorphism."
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(232),
                            IsDeleted = false,
                            QuestionText = "What is a balance sheet?"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(234),
                            IsDeleted = false,
                            QuestionText = "Define ROI."
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(236),
                            IsDeleted = false,
                            QuestionText = "What is SEO?"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(239),
                            IsDeleted = false,
                            QuestionText = "What is a target audience?"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(241),
                            IsDeleted = false,
                            QuestionText = "What is hypertension?"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(243),
                            IsDeleted = false,
                            QuestionText = "What is CPR?"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(246),
                            IsDeleted = false,
                            QuestionText = "What is pedagogy?"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(248),
                            IsDeleted = false,
                            QuestionText = "Explain lesson planning."
                        });
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.TestAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerOptionId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VacancyQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerOptionId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("VacancyQuestionId");

                    b.ToTable("TestAnswers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnswerOptionId = 1,
                            ApplicantId = 1,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(8148),
                            IsCorrect = true,
                            IsDeleted = false,
                            VacancyQuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            AnswerOptionId = 3,
                            ApplicantId = 1,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(8162),
                            IsCorrect = true,
                            IsDeleted = false,
                            VacancyQuestionId = 2
                        },
                        new
                        {
                            Id = 3,
                            AnswerOptionId = 1,
                            ApplicantId = 2,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(8165),
                            IsCorrect = true,
                            IsDeleted = false,
                            VacancyQuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            AnswerOptionId = 4,
                            ApplicantId = 2,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(8168),
                            IsCorrect = false,
                            IsDeleted = false,
                            VacancyQuestionId = 2
                        },
                        new
                        {
                            Id = 5,
                            AnswerOptionId = 1,
                            ApplicantId = 3,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(8171),
                            IsCorrect = true,
                            IsDeleted = false,
                            VacancyQuestionId = 3
                        },
                        new
                        {
                            Id = 6,
                            AnswerOptionId = 5,
                            ApplicantId = 3,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(8175),
                            IsCorrect = true,
                            IsDeleted = false,
                            VacancyQuestionId = 4
                        },
                        new
                        {
                            Id = 7,
                            AnswerOptionId = 5,
                            ApplicantId = 4,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(8177),
                            IsCorrect = true,
                            IsDeleted = false,
                            VacancyQuestionId = 4
                        },
                        new
                        {
                            Id = 8,
                            AnswerOptionId = 7,
                            ApplicantId = 5,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(8179),
                            IsCorrect = true,
                            IsDeleted = false,
                            VacancyQuestionId = 5
                        },
                        new
                        {
                            Id = 9,
                            AnswerOptionId = 9,
                            ApplicantId = 6,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(8182),
                            IsCorrect = true,
                            IsDeleted = false,
                            VacancyQuestionId = 6
                        },
                        new
                        {
                            Id = 10,
                            AnswerOptionId = 10,
                            ApplicantId = 7,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 636, DateTimeKind.Local).AddTicks(8185),
                            IsCorrect = false,
                            IsDeleted = false,
                            VacancyQuestionId = 7
                        });
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Vacancies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8225),
                            Description = "Entry level IT position",
                            EndDate = new DateTime(2025, 1, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8236),
                            IsActive = true,
                            IsDeleted = false,
                            QuestionCount = 10,
                            StartDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8235),
                            Title = "Junior Developer"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8247),
                            Description = "Advanced IT position",
                            EndDate = new DateTime(2025, 1, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8250),
                            IsActive = true,
                            IsDeleted = false,
                            QuestionCount = 15,
                            StartDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8249),
                            Title = "Senior Developer"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8255),
                            Description = "Analyze financial data",
                            EndDate = new DateTime(2025, 1, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8258),
                            IsActive = true,
                            IsDeleted = false,
                            QuestionCount = 8,
                            StartDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8256),
                            Title = "Financial Analyst"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8261),
                            Description = "Manage marketing campaigns",
                            EndDate = new DateTime(2025, 1, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8264),
                            IsActive = true,
                            IsDeleted = false,
                            QuestionCount = 12,
                            StartDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8262),
                            Title = "Marketing Manager"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8266),
                            Description = "Provide healthcare services",
                            EndDate = new DateTime(2025, 1, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8270),
                            IsActive = true,
                            IsDeleted = false,
                            QuestionCount = 5,
                            StartDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8268),
                            Title = "Nurse"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8273),
                            Description = "Teach students",
                            EndDate = new DateTime(2025, 1, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8276),
                            IsActive = true,
                            IsDeleted = false,
                            QuestionCount = 6,
                            StartDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8274),
                            Title = "Teacher"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 6,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8278),
                            Description = "Engineering role",
                            EndDate = new DateTime(2025, 1, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8282),
                            IsActive = true,
                            IsDeleted = false,
                            QuestionCount = 7,
                            StartDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8280),
                            Title = "Mechanical Engineer"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 7,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8284),
                            Description = "Manage sales team",
                            EndDate = new DateTime(2025, 1, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8287),
                            IsActive = true,
                            IsDeleted = false,
                            QuestionCount = 9,
                            StartDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8286),
                            Title = "Sales Manager"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 8,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8290),
                            Description = "Design buildings",
                            EndDate = new DateTime(2025, 1, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8293),
                            IsActive = true,
                            IsDeleted = false,
                            QuestionCount = 10,
                            StartDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8292),
                            Title = "Architect"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8296),
                            Description = "Coordinate logistics",
                            EndDate = new DateTime(2025, 1, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8299),
                            IsActive = true,
                            IsDeleted = false,
                            QuestionCount = 8,
                            StartDate = new DateTime(2024, 12, 10, 0, 22, 3, 637, DateTimeKind.Local).AddTicks(8298),
                            Title = "Logistics Coordinator"
                        });
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.VacancyQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionBankId")
                        .HasColumnType("int");

                    b.Property<int>("VacancyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionBankId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyQuestions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 638, DateTimeKind.Local).AddTicks(3227),
                            IsDeleted = false,
                            QuestionBankId = 1,
                            VacancyId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 638, DateTimeKind.Local).AddTicks(3237),
                            IsDeleted = false,
                            QuestionBankId = 2,
                            VacancyId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 638, DateTimeKind.Local).AddTicks(3240),
                            IsDeleted = false,
                            QuestionBankId = 1,
                            VacancyId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 638, DateTimeKind.Local).AddTicks(3242),
                            IsDeleted = false,
                            QuestionBankId = 3,
                            VacancyId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 638, DateTimeKind.Local).AddTicks(3244),
                            IsDeleted = false,
                            QuestionBankId = 3,
                            VacancyId = 3
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 638, DateTimeKind.Local).AddTicks(3246),
                            IsDeleted = false,
                            QuestionBankId = 4,
                            VacancyId = 3
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 638, DateTimeKind.Local).AddTicks(3248),
                            IsDeleted = false,
                            QuestionBankId = 5,
                            VacancyId = 4
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 638, DateTimeKind.Local).AddTicks(3251),
                            IsDeleted = false,
                            QuestionBankId = 7,
                            VacancyId = 5
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 638, DateTimeKind.Local).AddTicks(3253),
                            IsDeleted = false,
                            QuestionBankId = 9,
                            VacancyId = 6
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 12, 10, 0, 22, 3, 638, DateTimeKind.Local).AddTicks(3255),
                            IsDeleted = false,
                            QuestionBankId = 6,
                            VacancyId = 7
                        });
                });

            modelBuilder.Entity("ApplicationRoleApplicationUser", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.AnswerOption", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.QuestionBank", "QuestionBank")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionBankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QuestionBank");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.Applicant", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.Vacancy", "Vacancy")
                        .WithMany("Applicants")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.QuestionBank", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.Category", "Category")
                        .WithMany("QuestionBanks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.TestAnswer", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("AnswerOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.Applicant", "Applicant")
                        .WithMany("TestAnswers")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.VacancyQuestion", "VacancyQuestion")
                        .WithMany()
                        .HasForeignKey("VacancyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Applicant");

                    b.Navigation("VacancyQuestion");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.Vacancy", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.Category", "Category")
                        .WithMany("Vacancies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.VacancyQuestion", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.QuestionBank", "QuestionBank")
                        .WithMany()
                        .HasForeignKey("QuestionBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.Vacancy", "Vacancy")
                        .WithMany("VacancyQuestions")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QuestionBank");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.Applicant", b =>
                {
                    b.Navigation("TestAnswers");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.Category", b =>
                {
                    b.Navigation("QuestionBanks");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.QuestionBank", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.Vacancy", b =>
                {
                    b.Navigation("Applicants");

                    b.Navigation("VacancyQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
