// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VacancyManagementSystem.Persistence.Context;

#nullable disable

namespace VacancyManagementSystem.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241209171001_mig_2_Add_Changes_On_Tabel")]
    partial class mig_2_Add_Changes_On_Tabel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationRoleApplicationUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationRoleApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QuestionBankId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionBankId");

                    b.ToTable("AnswerOptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8378),
                            IsCorrect = true,
                            IsDeleted = false,
                            OptionText = "Programming Language",
                            QuestionBankId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8383),
                            IsCorrect = false,
                            IsDeleted = false,
                            OptionText = "A Framework",
                            QuestionBankId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8426),
                            IsCorrect = true,
                            IsDeleted = false,
                            OptionText = "Field of Business",
                            QuestionBankId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8429),
                            IsCorrect = false,
                            IsDeleted = false,
                            OptionText = "A Programming Language",
                            QuestionBankId = 2
                        });
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.Applicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CVPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<double>("TestScore")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VacancyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VacancyId");

                    b.ToTable("Applicants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CVPath = "jane.pdf",
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8627),
                            Email = "jane@domain.com",
                            FirstName = "Jane",
                            IsDeleted = false,
                            LastName = "Doe",
                            PhoneNumber = "1112223333",
                            TestScore = 85.0,
                            UserId = 1,
                            VacancyId = 1
                        },
                        new
                        {
                            Id = 2,
                            CVPath = "mark.pdf",
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8649),
                            Email = "mark@domain.com",
                            FirstName = "Mark",
                            IsDeleted = false,
                            LastName = "Smith",
                            PhoneNumber = "4445556666",
                            TestScore = 90.0,
                            UserId = 2,
                            VacancyId = 2
                        });
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 163, DateTimeKind.Local).AddTicks(6764),
                            IsDeleted = false,
                            Name = "Admin",
                            Role = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 163, DateTimeKind.Local).AddTicks(6771),
                            IsDeleted = false,
                            Name = "User",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0621ae2-d64f-4b25-a034-db9d65754d7a",
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(6992),
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "User",
                            LockoutEnabled = false,
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@domain.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "10913ae4-a135-4e47-9e43-314311007d4e",
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(7014),
                            EmailConfirmed = false,
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PhoneNumber = "0987654321",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "user@domain.com"
                        });
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(7894),
                            Description = "Software Development Jobs",
                            IsDeleted = false,
                            Name = "Software"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(7932),
                            Description = "Marketing Jobs",
                            IsDeleted = false,
                            Name = "Marketing"
                        });
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.QuestionBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("QuestionBanks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8254),
                            IsDeleted = false,
                            QuestionText = "What is C#?"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8266),
                            IsDeleted = false,
                            QuestionText = "What is Marketing?"
                        });
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.TestAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerOptionId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VacancyQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerOptionId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("VacancyQuestionId");

                    b.ToTable("TestAnswers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnswerOptionId = 1,
                            ApplicantId = 1,
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8778),
                            IsCorrect = true,
                            IsDeleted = false,
                            VacancyQuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            AnswerOptionId = 3,
                            ApplicantId = 2,
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8785),
                            IsCorrect = true,
                            IsDeleted = false,
                            VacancyQuestionId = 2
                        });
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Vacancies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8108),
                            Description = "Developing software solutions",
                            EndDate = new DateTime(2025, 1, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8117),
                            IsActive = true,
                            IsDeleted = false,
                            QuestionCount = 5,
                            StartDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8115),
                            Title = "Software Engineer"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8149),
                            Description = "Creating marketing campaigns",
                            EndDate = new DateTime(2025, 1, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8153),
                            IsActive = true,
                            IsDeleted = false,
                            QuestionCount = 4,
                            StartDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8151),
                            Title = "Marketing Specialist"
                        });
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.VacancyQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionBankId")
                        .HasColumnType("int");

                    b.Property<int>("VacancyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionBankId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyQuestions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8543),
                            IsDeleted = false,
                            QuestionBankId = 1,
                            VacancyId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 9, 21, 9, 53, 164, DateTimeKind.Local).AddTicks(8549),
                            IsDeleted = false,
                            QuestionBankId = 2,
                            VacancyId = 2
                        });
                });

            modelBuilder.Entity("ApplicationRoleApplicationUser", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.AnswerOption", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.QuestionBank", "QuestionBank")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionBankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QuestionBank");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.Applicant", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.Vacancy", "Vacancy")
                        .WithMany("Applicants")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.QuestionBank", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.Category", "Category")
                        .WithMany("QuestionBanks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.TestAnswer", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("AnswerOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.Applicant", "Applicant")
                        .WithMany("TestAnswers")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.VacancyQuestion", "VacancyQuestion")
                        .WithMany()
                        .HasForeignKey("VacancyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Applicant");

                    b.Navigation("VacancyQuestion");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.Vacancy", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.Category", "Category")
                        .WithMany("Vacancies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.VacancyQuestion", b =>
                {
                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.QuestionBank", "QuestionBank")
                        .WithMany()
                        .HasForeignKey("QuestionBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacancyManagementSystem.Domain.Entities.Concretes.Vacancy", "Vacancy")
                        .WithMany("VacancyQuestions")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QuestionBank");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.Applicant", b =>
                {
                    b.Navigation("TestAnswers");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.Category", b =>
                {
                    b.Navigation("QuestionBanks");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.QuestionBank", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("VacancyManagementSystem.Domain.Entities.Concretes.Vacancy", b =>
                {
                    b.Navigation("Applicants");

                    b.Navigation("VacancyQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
